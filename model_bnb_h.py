{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "CryptoPy.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNzQqzho6q5L3yBGJOxviey",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shiveshchowdary/cryptopy/blob/main/model_bnb_h.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rkukzm9Qjcj7",
        "outputId": "6b329774-c627-4928-ccd3-f2546e4200f5"
      },
      "source": [
        "import pandas as pd\r\n",
        "import numpy as np\r\n",
        "import tensorflow as tf\r\n",
        "import matplotlib.pyplot as plt\r\n",
        "import statsmodels.api as sm\r\n",
        "from sklearn.preprocessing import MinMaxScaler\r\n",
        "from sklearn.metrics import mean_squared_error\r\n",
        "import math\r\n",
        "import seaborn as sns\r\n",
        "sns.set()\r\n",
        "import warnings\r\n",
        "warnings.filterwarnings('ignore')"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QEFr3bEzjkLc"
      },
      "source": [
        "crypto_options = ['BTC','ETH','LTC','BNB','XRP']"
      ],
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WvRaOTaDj-ek",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b45f14db-3c3a-44f7-b0f2-8da3f50820e8"
      },
      "source": [
        "crypto_choice  = input(\"Enter the currency  \") "
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter the currency  BNB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "E0TjXG9okQHU",
        "outputId": "0df3b1d7-e976-4456-93bc-462f684d1dcb"
      },
      "source": [
        "crypto_choice"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'BNB'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mB0KwINtkUjH"
      },
      "source": [
        "data_path = '/content/Binance_' + crypto_choice + 'USDT_1h.csv'"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Dls4RYDEkner",
        "outputId": "4f871398-3a97-47d8-a3df-b11b2ec8ce24"
      },
      "source": [
        "data_path"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            },
            "text/plain": [
              "'/content/Binance_BNBUSDT_1h.csv'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sGAMDrWCkpiI"
      },
      "source": [
        "df = pd.read_csv(data_path)\r\n",
        "df['Volume'] = df['Volume '+crypto_choice]"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 195
        },
        "id": "jasEZStDkr1l",
        "outputId": "86382c3c-b354-4a95-93bb-a43254bc562a"
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unix Timestamp</th>\n",
              "      <th>Date</th>\n",
              "      <th>Symbol</th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume BNB</th>\n",
              "      <th>Volume USDT</th>\n",
              "      <th>Volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.596320e+12</td>\n",
              "      <td>01-08-2020 23:00</td>\n",
              "      <td>BNB/USDT</td>\n",
              "      <td>21.5900</td>\n",
              "      <td>21.6499</td>\n",
              "      <td>21.4000</td>\n",
              "      <td>21.6168</td>\n",
              "      <td>64522.64</td>\n",
              "      <td>1390137.571</td>\n",
              "      <td>64522.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.596330e+12</td>\n",
              "      <td>02-08-2020 00:00</td>\n",
              "      <td>BNB/USDT</td>\n",
              "      <td>21.6204</td>\n",
              "      <td>21.7216</td>\n",
              "      <td>21.4310</td>\n",
              "      <td>21.5604</td>\n",
              "      <td>90510.25</td>\n",
              "      <td>1955451.034</td>\n",
              "      <td>90510.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.596330e+12</td>\n",
              "      <td>02-08-2020 01:00</td>\n",
              "      <td>BNB/USDT</td>\n",
              "      <td>21.5648</td>\n",
              "      <td>22.0000</td>\n",
              "      <td>21.5445</td>\n",
              "      <td>21.9480</td>\n",
              "      <td>211148.45</td>\n",
              "      <td>4604213.215</td>\n",
              "      <td>211148.45</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.596330e+12</td>\n",
              "      <td>02-08-2020 02:00</td>\n",
              "      <td>BNB/USDT</td>\n",
              "      <td>21.9500</td>\n",
              "      <td>21.9873</td>\n",
              "      <td>21.7000</td>\n",
              "      <td>21.8493</td>\n",
              "      <td>176879.80</td>\n",
              "      <td>3870645.151</td>\n",
              "      <td>176879.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.596340e+12</td>\n",
              "      <td>02-08-2020 03:00</td>\n",
              "      <td>BNB/USDT</td>\n",
              "      <td>21.8486</td>\n",
              "      <td>22.1832</td>\n",
              "      <td>21.6851</td>\n",
              "      <td>22.0964</td>\n",
              "      <td>236465.98</td>\n",
              "      <td>5189766.887</td>\n",
              "      <td>236465.98</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Unix Timestamp              Date  ...  Volume USDT     Volume\n",
              "0    1.596320e+12  01-08-2020 23:00  ...  1390137.571   64522.64\n",
              "1    1.596330e+12  02-08-2020 00:00  ...  1955451.034   90510.25\n",
              "2    1.596330e+12  02-08-2020 01:00  ...  4604213.215  211148.45\n",
              "3    1.596330e+12  02-08-2020 02:00  ...  3870645.151  176879.80\n",
              "4    1.596340e+12  02-08-2020 03:00  ...  5189766.887  236465.98\n",
              "\n",
              "[5 rows x 10 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XXtsz-_KunRV"
      },
      "source": [
        "def moving_average(df, n):\n",
        "    \"\"\"Calculate the moving average for the given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    MA = pd.Series(df['Close'].rolling(n, min_periods=n).mean(), name='MA_' + str(n))\n",
        "    df = df.join(MA)\n",
        "    return df\n",
        "\n",
        "\n",
        "def exponential_moving_average(df, n):\n",
        "    \"\"\"\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    EMA = pd.Series(df['Close'].ewm(span=n, min_periods=n).mean(), name='EMA_' + str(n))\n",
        "    df = df.join(EMA)\n",
        "    return df\n",
        "\n",
        "\n",
        "def momentum(df, n):\n",
        "    \"\"\"\n",
        "    \n",
        "    :param df: pandas.DataFrame \n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    M = pd.Series(df['Close'].diff(n), name='Momentum_' + str(n))\n",
        "    df = df.join(M)\n",
        "    return df\n",
        "\n",
        "\n",
        "def rate_of_change(df, n):\n",
        "    \"\"\"\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    M = df['Close'].diff(n - 1)\n",
        "    N = df['Close'].shift(n - 1)\n",
        "    ROC = pd.Series(M / N, name='ROC_' + str(n))\n",
        "    df = df.join(ROC)\n",
        "    return df\n",
        "\n",
        "\n",
        "def average_true_range(df, n):\n",
        "    \"\"\"\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    TR_l = [0]\n",
        "    while i < df.index[-1]:\n",
        "        TR = max(df.loc[i + 1, 'High'], df.loc[i, 'Close']) - min(df.loc[i + 1, 'Low'], df.loc[i, 'Close'])\n",
        "        TR_l.append(TR)\n",
        "        i = i + 1\n",
        "    TR_s = pd.Series(TR_l)\n",
        "    ATR = pd.Series(TR_s.ewm(span=n, min_periods=n).mean(), name='ATR_' + str(n))\n",
        "    df = df.join(ATR)\n",
        "    return df\n",
        "\n",
        "\n",
        "def bollinger_bands(df, n):\n",
        "    \"\"\"\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    MA = pd.Series(df['Close'].rolling(n, min_periods=n).mean())\n",
        "    MSD = pd.Series(df['Close'].rolling(n, min_periods=n).std())\n",
        "    b1 = 4 * MSD / MA\n",
        "    B1 = pd.Series(b1, name='BollingerB_' + str(n))\n",
        "    df = df.join(B1)\n",
        "    b2 = (df['Close'] - MA + 2 * MSD) / (4 * MSD)\n",
        "    B2 = pd.Series(b2, name='Bollinger%b_' + str(n))\n",
        "    df = df.join(B2)\n",
        "    return df\n",
        "\n",
        "\n",
        "def ppsr(df):\n",
        "    \"\"\"Calculate Pivot Points, Supports and Resistances for given data\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    PP = pd.Series((df['High'] + df['Low'] + df['Close']) / 3)\n",
        "    R1 = pd.Series(2 * PP - df['Low'])\n",
        "    S1 = pd.Series(2 * PP - df['High'])\n",
        "    R2 = pd.Series(PP + df['High'] - df['Low'])\n",
        "    S2 = pd.Series(PP - df['High'] + df['Low'])\n",
        "    R3 = pd.Series(df['High'] + 2 * (PP - df['Low']))\n",
        "    S3 = pd.Series(df['Low'] - 2 * (df['High'] - PP))\n",
        "    psr = {'PP': PP, 'R1': R1, 'S1': S1, 'R2': R2, 'S2': S2, 'R3': R3, 'S3': S3}\n",
        "    PSR = pd.DataFrame(psr)\n",
        "    df = df.join(PSR)\n",
        "    return df\n",
        "\n",
        "\n",
        "def stochastic_oscillator_k(df):\n",
        "    \"\"\"Calculate stochastic oscillator %K for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    SOk = pd.Series((df['Close'] - df['Low']) / (df['High'] - df['Low']), name='SO%k')\n",
        "    df = df.join(SOk)\n",
        "    return df\n",
        "\n",
        "\n",
        "def stochastic_oscillator_d(df, n):\n",
        "    \"\"\"Calculate stochastic oscillator %D for given data.\n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    SOk = pd.Series((df['Close'] - df['Low']) / (df['High'] - df['Low']), name='SO%k')\n",
        "    SOd = pd.Series(SOk.ewm(span=n, min_periods=n).mean(), name='SO%d_' + str(n))\n",
        "    df = df.join(SOd)\n",
        "    return df\n",
        "\n",
        "\n",
        "def trix(df, n):\n",
        "    \"\"\"Calculate TRIX for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    EX1 = df['Close'].ewm(span=n, min_periods=n).mean()\n",
        "    EX2 = EX1.ewm(span=n, min_periods=n).mean()\n",
        "    EX3 = EX2.ewm(span=n, min_periods=n).mean()\n",
        "    i = 0\n",
        "    ROC_l = [np.nan]\n",
        "    while i + 1 <= df.index[-1]:\n",
        "        ROC = (EX3[i + 1] - EX3[i]) / EX3[i]\n",
        "        ROC_l.append(ROC)\n",
        "        i = i + 1\n",
        "    Trix = pd.Series(ROC_l, name='Trix_' + str(n))\n",
        "    df = df.join(Trix)\n",
        "    return df\n",
        "\n",
        "\n",
        "def average_directional_movement_index(df, n, n_ADX):\n",
        "    \"\"\"Calculate the Average Directional Movement Index for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :param n_ADX: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    UpI = []\n",
        "    DoI = []\n",
        "    while i + 1 <= df.index[-1]:\n",
        "        UpMove = df.loc[i + 1, 'High'] - df.loc[i, 'High']\n",
        "        DoMove = df.loc[i, 'Low'] - df.loc[i + 1, 'Low']\n",
        "        if UpMove > DoMove and UpMove > 0:\n",
        "            UpD = UpMove\n",
        "        else:\n",
        "            UpD = 0\n",
        "        UpI.append(UpD)\n",
        "        if DoMove > UpMove and DoMove > 0:\n",
        "            DoD = DoMove\n",
        "        else:\n",
        "            DoD = 0\n",
        "        DoI.append(DoD)\n",
        "        i = i + 1\n",
        "    i = 0\n",
        "    TR_l = [0]\n",
        "    while i < df.index[-1]:\n",
        "        TR = max(df.loc[i + 1, 'High'], df.loc[i, 'Close']) - min(df.loc[i + 1, 'Low'], df.loc[i, 'Close'])\n",
        "        TR_l.append(TR)\n",
        "        i = i + 1\n",
        "    TR_s = pd.Series(TR_l)\n",
        "    ATR = pd.Series(TR_s.ewm(span=n, min_periods=n).mean())\n",
        "    UpI = pd.Series(UpI)\n",
        "    DoI = pd.Series(DoI)\n",
        "    PosDI = pd.Series(UpI.ewm(span=n, min_periods=n).mean() / ATR)\n",
        "    NegDI = pd.Series(DoI.ewm(span=n, min_periods=n).mean() / ATR)\n",
        "    ADX = pd.Series((abs(PosDI - NegDI) / (PosDI + NegDI)).ewm(span=n_ADX, min_periods=n_ADX).mean(),\n",
        "                    name='ADX_' + str(n) + '_' + str(n_ADX))\n",
        "    df = df.join(ADX)\n",
        "    return df\n",
        "\n",
        "\n",
        "def macd(df, n_fast, n_slow):\n",
        "    \"\"\"Calculate MACD, MACD Signal and MACD difference\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n_fast: \n",
        "    :param n_slow: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    EMAfast = pd.Series(df['Close'].ewm(span=n_fast, min_periods=n_slow).mean())\n",
        "    EMAslow = pd.Series(df['Close'].ewm(span=n_slow, min_periods=n_slow).mean())\n",
        "    MACD = pd.Series(EMAfast - EMAslow, name='MACD_' + str(n_fast) + '_' + str(n_slow))\n",
        "    MACDsign = pd.Series(MACD.ewm(span=9, min_periods=9).mean(), name='MACDsign_' + str(n_fast) + '_' + str(n_slow))\n",
        "    MACDdiff = pd.Series(MACD - MACDsign, name='MACDdiff_' + str(n_fast) + '_' + str(n_slow))\n",
        "    df = df.join(MACD)\n",
        "    df = df.join(MACDsign)\n",
        "    df = df.join(MACDdiff)\n",
        "    return df\n",
        "\n",
        "\n",
        "def mass_index(df):\n",
        "    \"\"\"Calculate the Mass Index for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    Range = df['High'] - df['Low']\n",
        "    EX1 = Range.ewm(span=9, min_periods=9).mean()\n",
        "    EX2 = EX1.ewm(span=9, min_periods=9).mean()\n",
        "    Mass = EX1 / EX2\n",
        "    MassI = pd.Series(Mass.rolling(25).sum(), name='Mass Index')\n",
        "    df = df.join(MassI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def vortex_indicator(df, n):\n",
        "    \"\"\"Calculate the Vortex Indicator for given data.\n",
        "    \n",
        "    Vortex Indicator described here:\n",
        "        http://www.vortexindicator.com/VFX_VORTEX.PDF\n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    TR = [0]\n",
        "    while i < df.index[-1]:\n",
        "        Range = max(df.loc[i + 1, 'High'], df.loc[i, 'Close']) - min(df.loc[i + 1, 'Low'], df.loc[i, 'Close'])\n",
        "        TR.append(Range)\n",
        "        i = i + 1\n",
        "    i = 0\n",
        "    VM = [0]\n",
        "    while i < df.index[-1]:\n",
        "        Range = abs(df.loc[i + 1, 'High'] - df.loc[i, 'Low']) - abs(df.loc[i + 1, 'Low'] - df.loc[i, 'High'])\n",
        "        VM.append(Range)\n",
        "        i = i + 1\n",
        "    VI = pd.Series(pd.Series(VM).rolling(n).sum() / pd.Series(TR).rolling(n).sum(), name='Vortex_' + str(n))\n",
        "    df = df.join(VI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def kst_oscillator(df, r1, r2, r3, r4, n1, n2, n3, n4):\n",
        "    \"\"\"Calculate KST Oscillator for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param r1: \n",
        "    :param r2: \n",
        "    :param r3: \n",
        "    :param r4: \n",
        "    :param n1: \n",
        "    :param n2: \n",
        "    :param n3: \n",
        "    :param n4: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    M = df['Close'].diff(r1 - 1)\n",
        "    N = df['Close'].shift(r1 - 1)\n",
        "    ROC1 = M / N\n",
        "    M = df['Close'].diff(r2 - 1)\n",
        "    N = df['Close'].shift(r2 - 1)\n",
        "    ROC2 = M / N\n",
        "    M = df['Close'].diff(r3 - 1)\n",
        "    N = df['Close'].shift(r3 - 1)\n",
        "    ROC3 = M / N\n",
        "    M = df['Close'].diff(r4 - 1)\n",
        "    N = df['Close'].shift(r4 - 1)\n",
        "    ROC4 = M / N\n",
        "    KST = pd.Series(\n",
        "        ROC1.rolling(n1).sum() + ROC2.rolling(n2).sum() * 2 + ROC3.rolling(n3).sum() * 3 + ROC4.rolling(n4).sum() * 4,\n",
        "        name='KST_' + str(r1) + '_' + str(r2) + '_' + str(r3) + '_' + str(r4) + '_' + str(n1) + '_' + str(\n",
        "            n2) + '_' + str(n3) + '_' + str(n4))\n",
        "    df = df.join(KST)\n",
        "    return df\n",
        "\n",
        "\n",
        "def relative_strength_index(df, n):\n",
        "    \"\"\"Calculate Relative Strength Index(RSI) for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    UpI = [0]\n",
        "    DoI = [0]\n",
        "    while i + 1 <= df.index[-1]:\n",
        "        UpMove = df.loc[i + 1, 'High'] - df.loc[i, 'High']\n",
        "        DoMove = df.loc[i, 'Low'] - df.loc[i + 1, 'Low']\n",
        "        if UpMove > DoMove and UpMove > 0:\n",
        "            UpD = UpMove\n",
        "        else:\n",
        "            UpD = 0\n",
        "        UpI.append(UpD)\n",
        "        if DoMove > UpMove and DoMove > 0:\n",
        "            DoD = DoMove\n",
        "        else:\n",
        "            DoD = 0\n",
        "        DoI.append(DoD)\n",
        "        i = i + 1\n",
        "    UpI = pd.Series(UpI)\n",
        "    DoI = pd.Series(DoI)\n",
        "    PosDI = pd.Series(UpI.ewm(span=n, min_periods=n).mean())\n",
        "    NegDI = pd.Series(DoI.ewm(span=n, min_periods=n).mean())\n",
        "    RSI = pd.Series(PosDI / (PosDI + NegDI), name='RSI_' + str(n))\n",
        "    df = df.join(RSI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def true_strength_index(df, r, s):\n",
        "    \"\"\"Calculate True Strength Index (TSI) for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param r: \n",
        "    :param s: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    M = pd.Series(df['Close'].diff(1))\n",
        "    aM = abs(M)\n",
        "    EMA1 = pd.Series(M.ewm(span=r, min_periods=r).mean())\n",
        "    aEMA1 = pd.Series(aM.ewm(span=r, min_periods=r).mean())\n",
        "    EMA2 = pd.Series(EMA1.ewm(span=s, min_periods=s).mean())\n",
        "    aEMA2 = pd.Series(aEMA1.ewm(span=s, min_periods=s).mean())\n",
        "    TSI = pd.Series(EMA2 / aEMA2, name='TSI_' + str(r) + '_' + str(s))\n",
        "    df = df.join(TSI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def accumulation_distribution(df, n):\n",
        "    \"\"\"Calculate Accumulation/Distribution for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    ad = (2 * df['Close'] - df['High'] - df['Low']) / (df['High'] - df['Low']) * df['Volume']\n",
        "    M = ad.diff(n - 1)\n",
        "    N = ad.shift(n - 1)\n",
        "    ROC = M / N\n",
        "    AD = pd.Series(ROC, name='Acc/Dist_ROC_' + str(n))\n",
        "    df = df.join(AD)\n",
        "    return df\n",
        "\n",
        "\n",
        "def chaikin_oscillator(df):\n",
        "    \"\"\"Calculate Chaikin Oscillator for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    ad = (2 * df['Close'] - df['High'] - df['Low']) / (df['High'] - df['Low']) * df['Volume']\n",
        "    Chaikin = pd.Series(ad.ewm(span=3, min_periods=3).mean() - ad.ewm(span=10, min_periods=10).mean(), name='Chaikin')\n",
        "    df = df.join(Chaikin)\n",
        "    return df\n",
        "\n",
        "\n",
        "def money_flow_index(df, n):\n",
        "    \"\"\"Calculate Money Flow Index and Ratio for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    PP = (df['High'] + df['Low'] + df['Close']) / 3\n",
        "    i = 0\n",
        "    PosMF = [0]\n",
        "    while i < df.index[-1]:\n",
        "        if PP[i + 1] > PP[i]:\n",
        "            PosMF.append(PP[i + 1] * df.loc[i + 1, 'Volume'])\n",
        "        else:\n",
        "            PosMF.append(0)\n",
        "        i = i + 1\n",
        "    PosMF = pd.Series(PosMF)\n",
        "    TotMF = PP * df['Volume']\n",
        "    MFR = pd.Series(PosMF / TotMF)\n",
        "    MFI = pd.Series(MFR.rolling(n, min_periods=n).mean(), name='MFI_' + str(n))\n",
        "    df = df.join(MFI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def on_balance_volume(df, n):\n",
        "    \"\"\"Calculate On-Balance Volume for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    OBV = [0]\n",
        "    while i < df.index[-1]:\n",
        "        if df.loc[i + 1, 'Close'] - df.loc[i, 'Close'] > 0:\n",
        "            OBV.append(df.loc[i + 1, 'Volume'])\n",
        "        if df.loc[i + 1, 'Close'] - df.loc[i, 'Close'] == 0:\n",
        "            OBV.append(0)\n",
        "        if df.loc[i + 1, 'Close'] - df.loc[i, 'Close'] < 0:\n",
        "            OBV.append(-df.loc[i + 1, 'Volume'])\n",
        "        i = i + 1\n",
        "    OBV = pd.Series(OBV)\n",
        "    OBV_ma = pd.Series(OBV.rolling(n, min_periods=n).mean(), name='OBV_' + str(n))\n",
        "    df = df.join(OBV_ma)\n",
        "    return df\n",
        "\n",
        "\n",
        "def force_index(df, n):\n",
        "    \"\"\"Calculate Force Index for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    F = pd.Series(df['Close'].diff(n) * df['Volume'].diff(n), name='Force_' + str(n))\n",
        "    df = df.join(F)\n",
        "    return df\n",
        "\n",
        "\n",
        "def ease_of_movement(df, n):\n",
        "    \"\"\"Calculate Ease of Movement for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    EoM = (df['High'].diff(1) + df['Low'].diff(1)) * (df['High'] - df['Low']) / (2 * df['Volume'])\n",
        "    Eom_ma = pd.Series(EoM.rolling(n, min_periods=n).mean(), name='EoM_' + str(n))\n",
        "    df = df.join(Eom_ma)\n",
        "    return df\n",
        "\n",
        "\n",
        "def commodity_channel_index(df, n):\n",
        "    \"\"\"Calculate Commodity Channel Index for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    PP = (df['High'] + df['Low'] + df['Close']) / 3\n",
        "    CCI = pd.Series((PP - PP.rolling(n, min_periods=n).mean()) / PP.rolling(n, min_periods=n).std(),\n",
        "                    name='CCI_' + str(n))\n",
        "    df = df.join(CCI)\n",
        "    return df\n",
        "\n",
        "\n",
        "def coppock_curve(df, n):\n",
        "    \"\"\"Calculate Coppock Curve for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    M = df['Close'].diff(int(n * 11 / 10) - 1)\n",
        "    N = df['Close'].shift(int(n * 11 / 10) - 1)\n",
        "    ROC1 = M / N\n",
        "    M = df['Close'].diff(int(n * 14 / 10) - 1)\n",
        "    N = df['Close'].shift(int(n * 14 / 10) - 1)\n",
        "    ROC2 = M / N\n",
        "    Copp = pd.Series((ROC1 + ROC2).ewm(span=n, min_periods=n).mean(), name='Copp_' + str(n))\n",
        "    df = df.join(Copp)\n",
        "    return df\n",
        "\n",
        "\n",
        "def keltner_channel(df, n):\n",
        "    \"\"\"Calculate Keltner Channel for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    KelChM = pd.Series(((df['High'] + df['Low'] + df['Close']) / 3).rolling(n, min_periods=n).mean(),\n",
        "                       name='KelChM_' + str(n))\n",
        "    KelChU = pd.Series(((4 * df['High'] - 2 * df['Low'] + df['Close']) / 3).rolling(n, min_periods=n).mean(),\n",
        "                       name='KelChU_' + str(n))\n",
        "    KelChD = pd.Series(((-2 * df['High'] + 4 * df['Low'] + df['Close']) / 3).rolling(n, min_periods=n).mean(),\n",
        "                       name='KelChD_' + str(n))\n",
        "    df = df.join(KelChM)\n",
        "    df = df.join(KelChU)\n",
        "    df = df.join(KelChD)\n",
        "    return df\n",
        "\n",
        "\n",
        "def ultimate_oscillator(df):\n",
        "    \"\"\"Calculate Ultimate Oscillator for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    TR_l = [0]\n",
        "    BP_l = [0]\n",
        "    while i < df.index[-1]:\n",
        "        TR = max(df.loc[i + 1, 'High'], df.loc[i, 'Close']) - min(df.loc[i + 1, 'Low'], df.loc[i, 'Close'])\n",
        "        TR_l.append(TR)\n",
        "        BP = df.loc[i + 1, 'Close'] - min(df.loc[i + 1, 'Low'], df.loc[i, 'Close'])\n",
        "        BP_l.append(BP)\n",
        "        i = i + 1\n",
        "    UltO = pd.Series((4 * pd.Series(BP_l).rolling(7).sum() / pd.Series(TR_l).rolling(7).sum()) + (\n",
        "                2 * pd.Series(BP_l).rolling(14).sum() / pd.Series(TR_l).rolling(14).sum()) + (\n",
        "                                 pd.Series(BP_l).rolling(28).sum() / pd.Series(TR_l).rolling(28).sum()),\n",
        "                     name='Ultimate_Osc')\n",
        "    df = df.join(UltO)\n",
        "    return df\n",
        "\n",
        "\n",
        "def donchian_channel(df, n):\n",
        "    \"\"\"Calculate donchian channel of given pandas data frame.\n",
        "    :param df: pandas.DataFrame\n",
        "    :param n:\n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    i = 0\n",
        "    dc_l = []\n",
        "    while i < n - 1:\n",
        "        dc_l.append(0)\n",
        "        i += 1\n",
        "\n",
        "    i = 0\n",
        "    while i + n - 1 < df.index[-1]:\n",
        "        dc = max(df['High'].ix[i:i + n - 1]) - min(df['Low'].ix[i:i + n - 1])\n",
        "        dc_l.append(dc)\n",
        "        i += 1\n",
        "\n",
        "    donchian_chan = pd.Series(dc_l, name='Donchian_' + str(n))\n",
        "    donchian_chan = donchian_chan.shift(n - 1)\n",
        "    return df.join(donchian_chan)\n",
        "\n",
        "\n",
        "def standard_deviation(df, n):\n",
        "    \"\"\"Calculate Standard Deviation for given data.\n",
        "    \n",
        "    :param df: pandas.DataFrame\n",
        "    :param n: \n",
        "    :return: pandas.DataFrame\n",
        "    \"\"\"\n",
        "    df = df.join(pd.Series(df['Close'].rolling(n, min_periods=n).std(), name='STD_' + str(n)))\n",
        "    return df"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "If0QSsmvlNI8"
      },
      "source": [
        "df = moving_average(df, 10)\r\n",
        "df = exponential_moving_average(df, 10)\r\n",
        "df = momentum(df, 10)\r\n",
        "df = rate_of_change(df, 10)\r\n",
        "df = average_true_range(df, 10)\r\n",
        "df = bollinger_bands(df, 10)\r\n",
        "df = ppsr(df)\r\n",
        "df = stochastic_oscillator_k(df)\r\n",
        "df = stochastic_oscillator_d(df, 10)\r\n",
        "df = trix(df, 10)\r\n",
        "df = average_directional_movement_index(df, 10, 25)\r\n",
        "df = macd(df, 10, 50)\r\n",
        "df = mass_index(df)\r\n",
        "df = vortex_indicator(df, 10)\r\n",
        "df = kst_oscillator(df,10,15, 20, 30, 1, 2, 3, 4)\r\n",
        "df = relative_strength_index(df, 10)\r\n",
        "df = true_strength_index(df,10,20)\r\n",
        "df = accumulation_distribution(df, 10)\r\n",
        "df = chaikin_oscillator(df)\r\n",
        "df = money_flow_index(df, 10)\r\n",
        "df = on_balance_volume(df, 10)\r\n",
        "df = force_index(df, 10)\r\n",
        "df = ease_of_movement(df, 10)\r\n",
        "df = commodity_channel_index(df, 10)\r\n",
        "df = coppock_curve(df, 10)\r\n",
        "df = keltner_channel(df, 10)\r\n",
        "df = ultimate_oscillator(df)\r\n",
        "#df = donchian_channel(df, 10)\r\n",
        "df = standard_deviation(df, 10)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bB4F1Kwglnai"
      },
      "source": [
        "df = df.replace([np.inf, -np.inf], np.nan)\r\n",
        "\r\n",
        "df = df.fillna(df.mean())"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Kphk4XkWoKtC"
      },
      "source": [
        "\r\n",
        "# prepare data for lstm\r\n",
        "from pandas import read_csv\r\n",
        "from pandas import DataFrame\r\n",
        "from pandas import concat\r\n",
        "from sklearn.preprocessing import LabelEncoder\r\n",
        "from sklearn.preprocessing import MinMaxScaler\r\n",
        " \r\n",
        "# convert series to supervised learning\r\n",
        "def series_to_supervised(data, n_in=1, n_out=1, dropnan=True):\r\n",
        "    n_vars = 1 if type(data) is list else data.shape[1]\r\n",
        "    df = DataFrame(data)\r\n",
        "    cols, names = list(), list()\r\n",
        "    # input sequence (t-n, ... t-1)\r\n",
        "    for i in range(n_in, 0, -1):\r\n",
        "        cols.append(df.shift(i))\r\n",
        "        names += [('var%d(t-%d)' % (j+1, i)) for j in range(n_vars)]\r\n",
        "    # forecast sequence (t, t+1, ... t+n)\r\n",
        "    for i in range(0, n_out):\r\n",
        "        cols.append(df.shift(-i))\r\n",
        "        if i == 0:\r\n",
        "            names += [('var%d(t)' % (j+1)) for j in range(n_vars)]\r\n",
        "        else:\r\n",
        "            names += [('var%d(t+%d)' % (j+1, i)) for j in range(n_vars)]\r\n",
        "    # put it all together\r\n",
        "    agg = concat(cols, axis=1)\r\n",
        "    agg.columns = names\r\n",
        "    # drop rows with NaN values\r\n",
        "    if dropnan:\r\n",
        "        agg.dropna(inplace=True)\r\n",
        "    return agg\r\n",
        "dataset = df.drop(['Unix Timestamp','Date','Symbol'],axis=1)\r\n",
        "values = dataset.values"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "bkAq2-dooP5-",
        "outputId": "77dd43f0-c632-4b2a-ebb3-397e863fcf0a"
      },
      "source": [
        "dataset"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Close</th>\n",
              "      <th>Volume BNB</th>\n",
              "      <th>Volume USDT</th>\n",
              "      <th>Volume</th>\n",
              "      <th>MA_10</th>\n",
              "      <th>EMA_10</th>\n",
              "      <th>Momentum_10</th>\n",
              "      <th>ROC_10</th>\n",
              "      <th>ATR_10</th>\n",
              "      <th>BollingerB_10</th>\n",
              "      <th>Bollinger%b_10</th>\n",
              "      <th>PP</th>\n",
              "      <th>R1</th>\n",
              "      <th>S1</th>\n",
              "      <th>R2</th>\n",
              "      <th>S2</th>\n",
              "      <th>R3</th>\n",
              "      <th>S3</th>\n",
              "      <th>SO%k</th>\n",
              "      <th>SO%d_10</th>\n",
              "      <th>Trix_10</th>\n",
              "      <th>ADX_10_25</th>\n",
              "      <th>MACD_10_50</th>\n",
              "      <th>MACDsign_10_50</th>\n",
              "      <th>MACDdiff_10_50</th>\n",
              "      <th>Mass Index</th>\n",
              "      <th>Vortex_10</th>\n",
              "      <th>KST_10_15_20_30_1_2_3_4</th>\n",
              "      <th>RSI_10</th>\n",
              "      <th>TSI_10_20</th>\n",
              "      <th>Acc/Dist_ROC_10</th>\n",
              "      <th>Chaikin</th>\n",
              "      <th>MFI_10</th>\n",
              "      <th>OBV_10</th>\n",
              "      <th>Force_10</th>\n",
              "      <th>EoM_10</th>\n",
              "      <th>CCI_10</th>\n",
              "      <th>Copp_10</th>\n",
              "      <th>KelChM_10</th>\n",
              "      <th>KelChU_10</th>\n",
              "      <th>KelChD_10</th>\n",
              "      <th>Ultimate_Osc</th>\n",
              "      <th>STD_10</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.5900</td>\n",
              "      <td>21.6499</td>\n",
              "      <td>21.4000</td>\n",
              "      <td>21.6168</td>\n",
              "      <td>64522.640</td>\n",
              "      <td>1.390138e+06</td>\n",
              "      <td>64522.640</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.555567</td>\n",
              "      <td>21.711133</td>\n",
              "      <td>21.461233</td>\n",
              "      <td>21.805467</td>\n",
              "      <td>21.305667</td>\n",
              "      <td>21.961033</td>\n",
              "      <td>21.211333</td>\n",
              "      <td>0.867547</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21.6204</td>\n",
              "      <td>21.7216</td>\n",
              "      <td>21.4310</td>\n",
              "      <td>21.5604</td>\n",
              "      <td>90510.250</td>\n",
              "      <td>1.955451e+06</td>\n",
              "      <td>90510.250</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.571000</td>\n",
              "      <td>21.711000</td>\n",
              "      <td>21.420400</td>\n",
              "      <td>21.861600</td>\n",
              "      <td>21.280400</td>\n",
              "      <td>22.001600</td>\n",
              "      <td>21.129800</td>\n",
              "      <td>0.445286</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21.5648</td>\n",
              "      <td>22.0000</td>\n",
              "      <td>21.5445</td>\n",
              "      <td>21.9480</td>\n",
              "      <td>211148.450</td>\n",
              "      <td>4.604213e+06</td>\n",
              "      <td>211148.450</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.830833</td>\n",
              "      <td>22.117167</td>\n",
              "      <td>21.661667</td>\n",
              "      <td>22.286333</td>\n",
              "      <td>21.375333</td>\n",
              "      <td>22.572667</td>\n",
              "      <td>21.206167</td>\n",
              "      <td>0.885840</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>21.9500</td>\n",
              "      <td>21.9873</td>\n",
              "      <td>21.7000</td>\n",
              "      <td>21.8493</td>\n",
              "      <td>176879.800</td>\n",
              "      <td>3.870645e+06</td>\n",
              "      <td>176879.800</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.845533</td>\n",
              "      <td>21.991067</td>\n",
              "      <td>21.703767</td>\n",
              "      <td>22.132833</td>\n",
              "      <td>21.558233</td>\n",
              "      <td>22.278367</td>\n",
              "      <td>21.416467</td>\n",
              "      <td>0.519666</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21.8486</td>\n",
              "      <td>22.1832</td>\n",
              "      <td>21.6851</td>\n",
              "      <td>22.0964</td>\n",
              "      <td>236465.980</td>\n",
              "      <td>5.189767e+06</td>\n",
              "      <td>236465.980</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.988233</td>\n",
              "      <td>22.291367</td>\n",
              "      <td>21.793267</td>\n",
              "      <td>22.486333</td>\n",
              "      <td>21.490133</td>\n",
              "      <td>22.789467</td>\n",
              "      <td>21.295167</td>\n",
              "      <td>0.825738</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2996</th>\n",
              "      <td>29.6684</td>\n",
              "      <td>29.6777</td>\n",
              "      <td>29.5000</td>\n",
              "      <td>29.5864</td>\n",
              "      <td>25224.484</td>\n",
              "      <td>7.455520e+05</td>\n",
              "      <td>25224.484</td>\n",
              "      <td>29.549030</td>\n",
              "      <td>29.665608</td>\n",
              "      <td>-0.077000</td>\n",
              "      <td>0.010013</td>\n",
              "      <td>0.247825</td>\n",
              "      <td>0.018477</td>\n",
              "      <td>0.568444</td>\n",
              "      <td>29.588033</td>\n",
              "      <td>29.676067</td>\n",
              "      <td>29.498367</td>\n",
              "      <td>29.765733</td>\n",
              "      <td>29.410333</td>\n",
              "      <td>29.853767</td>\n",
              "      <td>29.320667</td>\n",
              "      <td>0.486213</td>\n",
              "      <td>0.525558</td>\n",
              "      <td>-0.001565</td>\n",
              "      <td>0.455695</td>\n",
              "      <td>-0.443699</td>\n",
              "      <td>-0.389233</td>\n",
              "      <td>-0.054466</td>\n",
              "      <td>25.684742</td>\n",
              "      <td>-0.226532</td>\n",
              "      <td>-0.899139</td>\n",
              "      <td>0.284627</td>\n",
              "      <td>-0.224848</td>\n",
              "      <td>-9.927756e-01</td>\n",
              "      <td>5226.196145</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>6386.476300</td>\n",
              "      <td>16808.813098</td>\n",
              "      <td>-1.188300e-07</td>\n",
              "      <td>0.469893</td>\n",
              "      <td>-0.043122</td>\n",
              "      <td>29.550197</td>\n",
              "      <td>29.841237</td>\n",
              "      <td>29.259157</td>\n",
              "      <td>3.512809</td>\n",
              "      <td>0.136498</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2997</th>\n",
              "      <td>29.5896</td>\n",
              "      <td>29.5990</td>\n",
              "      <td>29.1614</td>\n",
              "      <td>29.3005</td>\n",
              "      <td>79507.131</td>\n",
              "      <td>2.336592e+06</td>\n",
              "      <td>79507.131</td>\n",
              "      <td>29.549770</td>\n",
              "      <td>29.599224</td>\n",
              "      <td>0.007400</td>\n",
              "      <td>-0.014118</td>\n",
              "      <td>0.282330</td>\n",
              "      <td>0.018270</td>\n",
              "      <td>0.038278</td>\n",
              "      <td>29.353633</td>\n",
              "      <td>29.545867</td>\n",
              "      <td>29.108267</td>\n",
              "      <td>29.791233</td>\n",
              "      <td>28.916033</td>\n",
              "      <td>29.983467</td>\n",
              "      <td>28.670667</td>\n",
              "      <td>0.317870</td>\n",
              "      <td>0.487797</td>\n",
              "      <td>-0.001541</td>\n",
              "      <td>0.483009</td>\n",
              "      <td>-0.478365</td>\n",
              "      <td>-0.407059</td>\n",
              "      <td>-0.071305</td>\n",
              "      <td>25.755838</td>\n",
              "      <td>-0.117158</td>\n",
              "      <td>-0.969808</td>\n",
              "      <td>0.161843</td>\n",
              "      <td>-0.243082</td>\n",
              "      <td>-1.342082e+00</td>\n",
              "      <td>-6208.430521</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9730.102700</td>\n",
              "      <td>-247.428354</td>\n",
              "      <td>-3.897602e-08</td>\n",
              "      <td>-1.885690</td>\n",
              "      <td>-0.041900</td>\n",
              "      <td>29.539650</td>\n",
              "      <td>29.816030</td>\n",
              "      <td>29.263270</td>\n",
              "      <td>3.211586</td>\n",
              "      <td>0.134967</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2998</th>\n",
              "      <td>29.3038</td>\n",
              "      <td>29.4165</td>\n",
              "      <td>28.7051</td>\n",
              "      <td>28.9072</td>\n",
              "      <td>94503.314</td>\n",
              "      <td>2.748226e+06</td>\n",
              "      <td>94503.314</td>\n",
              "      <td>29.468480</td>\n",
              "      <td>29.473402</td>\n",
              "      <td>-0.812900</td>\n",
              "      <td>-0.022487</td>\n",
              "      <td>0.360343</td>\n",
              "      <td>0.031404</td>\n",
              "      <td>-0.106499</td>\n",
              "      <td>29.009600</td>\n",
              "      <td>29.314100</td>\n",
              "      <td>28.602700</td>\n",
              "      <td>29.721000</td>\n",
              "      <td>28.298200</td>\n",
              "      <td>30.025500</td>\n",
              "      <td>27.891300</td>\n",
              "      <td>0.284088</td>\n",
              "      <td>0.450759</td>\n",
              "      <td>-0.001613</td>\n",
              "      <td>0.508143</td>\n",
              "      <td>-0.558290</td>\n",
              "      <td>-0.437306</td>\n",
              "      <td>-0.120984</td>\n",
              "      <td>26.077564</td>\n",
              "      <td>-0.315304</td>\n",
              "      <td>-1.150611</td>\n",
              "      <td>0.094616</td>\n",
              "      <td>-0.287353</td>\n",
              "      <td>8.715991e-01</td>\n",
              "      <td>-14091.526039</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>-11947.764400</td>\n",
              "      <td>22575.893755</td>\n",
              "      <td>-2.665565e-07</td>\n",
              "      <td>-2.454804</td>\n",
              "      <td>-0.047806</td>\n",
              "      <td>29.482240</td>\n",
              "      <td>29.770660</td>\n",
              "      <td>29.193820</td>\n",
              "      <td>3.082025</td>\n",
              "      <td>0.231361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2999</th>\n",
              "      <td>28.9073</td>\n",
              "      <td>29.4170</td>\n",
              "      <td>28.8655</td>\n",
              "      <td>29.0231</td>\n",
              "      <td>157791.114</td>\n",
              "      <td>4.611742e+06</td>\n",
              "      <td>157791.114</td>\n",
              "      <td>29.413570</td>\n",
              "      <td>29.391529</td>\n",
              "      <td>-0.549100</td>\n",
              "      <td>-0.019672</td>\n",
              "      <td>0.395098</td>\n",
              "      <td>0.036242</td>\n",
              "      <td>0.133706</td>\n",
              "      <td>29.101867</td>\n",
              "      <td>29.338233</td>\n",
              "      <td>28.786733</td>\n",
              "      <td>29.653367</td>\n",
              "      <td>28.550367</td>\n",
              "      <td>29.889733</td>\n",
              "      <td>28.235233</td>\n",
              "      <td>0.285766</td>\n",
              "      <td>0.420760</td>\n",
              "      <td>-0.001700</td>\n",
              "      <td>0.531345</td>\n",
              "      <td>-0.600610</td>\n",
              "      <td>-0.469966</td>\n",
              "      <td>-0.130644</td>\n",
              "      <td>26.423596</td>\n",
              "      <td>-0.296414</td>\n",
              "      <td>-1.271441</td>\n",
              "      <td>0.095119</td>\n",
              "      <td>-0.303720</td>\n",
              "      <td>-5.987799e+00</td>\n",
              "      <td>-24562.513910</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>8786.863100</td>\n",
              "      <td>-59432.361792</td>\n",
              "      <td>-2.827992e-07</td>\n",
              "      <td>-1.496051</td>\n",
              "      <td>-0.046415</td>\n",
              "      <td>29.432090</td>\n",
              "      <td>29.754410</td>\n",
              "      <td>29.109770</td>\n",
              "      <td>2.765954</td>\n",
              "      <td>0.266501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3000</th>\n",
              "      <td>29.0315</td>\n",
              "      <td>29.0495</td>\n",
              "      <td>28.8955</td>\n",
              "      <td>28.9105</td>\n",
              "      <td>5967.187</td>\n",
              "      <td>1.728995e+05</td>\n",
              "      <td>5967.187</td>\n",
              "      <td>29.344070</td>\n",
              "      <td>29.304069</td>\n",
              "      <td>-0.695000</td>\n",
              "      <td>-0.016442</td>\n",
              "      <td>0.351262</td>\n",
              "      <td>0.040822</td>\n",
              "      <td>0.138053</td>\n",
              "      <td>28.951833</td>\n",
              "      <td>29.008167</td>\n",
              "      <td>28.854167</td>\n",
              "      <td>29.105833</td>\n",
              "      <td>28.797833</td>\n",
              "      <td>29.162167</td>\n",
              "      <td>28.700167</td>\n",
              "      <td>0.097403</td>\n",
              "      <td>0.361968</td>\n",
              "      <td>-0.001799</td>\n",
              "      <td>0.531345</td>\n",
              "      <td>-0.645653</td>\n",
              "      <td>-0.505104</td>\n",
              "      <td>-0.140549</td>\n",
              "      <td>26.557589</td>\n",
              "      <td>-0.385534</td>\n",
              "      <td>-1.297586</td>\n",
              "      <td>0.095119</td>\n",
              "      <td>-0.323754</td>\n",
              "      <td>-9.050139e-01</td>\n",
              "      <td>-6630.159451</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2743.445700</td>\n",
              "      <td>33707.361000</td>\n",
              "      <td>-6.959226e-07</td>\n",
              "      <td>-1.606970</td>\n",
              "      <td>-0.044619</td>\n",
              "      <td>29.368910</td>\n",
              "      <td>29.680270</td>\n",
              "      <td>29.057550</td>\n",
              "      <td>2.708718</td>\n",
              "      <td>0.299471</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3001 rows × 46 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         Open     High      Low  ...  KelChD_10  Ultimate_Osc    STD_10\n",
              "0     21.5900  21.6499  21.4000  ...  26.277656      3.741405  0.260022\n",
              "1     21.6204  21.7216  21.4310  ...  26.277656      3.741405  0.260022\n",
              "2     21.5648  22.0000  21.5445  ...  26.277656      3.741405  0.260022\n",
              "3     21.9500  21.9873  21.7000  ...  26.277656      3.741405  0.260022\n",
              "4     21.8486  22.1832  21.6851  ...  26.277656      3.741405  0.260022\n",
              "...       ...      ...      ...  ...        ...           ...       ...\n",
              "2996  29.6684  29.6777  29.5000  ...  29.259157      3.512809  0.136498\n",
              "2997  29.5896  29.5990  29.1614  ...  29.263270      3.211586  0.134967\n",
              "2998  29.3038  29.4165  28.7051  ...  29.193820      3.082025  0.231361\n",
              "2999  28.9073  29.4170  28.8655  ...  29.109770      2.765954  0.266501\n",
              "3000  29.0315  29.0495  28.8955  ...  29.057550      2.708718  0.299471\n",
              "\n",
              "[3001 rows x 46 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wVD5ElTcoSKI",
        "outputId": "9636c9f7-a249-40c7-8d51-92b564fff90c"
      },
      "source": [
        "dataset.columns"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Open', 'High', 'Low', 'Close', 'Volume BNB', 'Volume USDT', 'Volume',\n",
              "       'MA_10', 'EMA_10', 'Momentum_10', 'ROC_10', 'ATR_10', 'BollingerB_10',\n",
              "       'Bollinger%b_10', 'PP', 'R1', 'S1', 'R2', 'S2', 'R3', 'S3', 'SO%k',\n",
              "       'SO%d_10', 'Trix_10', 'ADX_10_25', 'MACD_10_50', 'MACDsign_10_50',\n",
              "       'MACDdiff_10_50', 'Mass Index', 'Vortex_10', 'KST_10_15_20_30_1_2_3_4',\n",
              "       'RSI_10', 'TSI_10_20', 'Acc/Dist_ROC_10', 'Chaikin', 'MFI_10', 'OBV_10',\n",
              "       'Force_10', 'EoM_10', 'CCI_10', 'Copp_10', 'KelChM_10', 'KelChU_10',\n",
              "       'KelChD_10', 'Ultimate_Osc', 'STD_10'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oOIfke0zoYe3"
      },
      "source": [
        "y = dataset['Close']\r\n",
        "X = dataset.drop(['Close'],axis=1)"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Fvbicj0Woa3q"
      },
      "source": [
        "X = X.join(y)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "AOHt45Beocb-",
        "outputId": "6c607112-5bd1-4d1d-95aa-f2abc197da45"
      },
      "source": [
        "X"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Open</th>\n",
              "      <th>High</th>\n",
              "      <th>Low</th>\n",
              "      <th>Volume BNB</th>\n",
              "      <th>Volume USDT</th>\n",
              "      <th>Volume</th>\n",
              "      <th>MA_10</th>\n",
              "      <th>EMA_10</th>\n",
              "      <th>Momentum_10</th>\n",
              "      <th>ROC_10</th>\n",
              "      <th>ATR_10</th>\n",
              "      <th>BollingerB_10</th>\n",
              "      <th>Bollinger%b_10</th>\n",
              "      <th>PP</th>\n",
              "      <th>R1</th>\n",
              "      <th>S1</th>\n",
              "      <th>R2</th>\n",
              "      <th>S2</th>\n",
              "      <th>R3</th>\n",
              "      <th>S3</th>\n",
              "      <th>SO%k</th>\n",
              "      <th>SO%d_10</th>\n",
              "      <th>Trix_10</th>\n",
              "      <th>ADX_10_25</th>\n",
              "      <th>MACD_10_50</th>\n",
              "      <th>MACDsign_10_50</th>\n",
              "      <th>MACDdiff_10_50</th>\n",
              "      <th>Mass Index</th>\n",
              "      <th>Vortex_10</th>\n",
              "      <th>KST_10_15_20_30_1_2_3_4</th>\n",
              "      <th>RSI_10</th>\n",
              "      <th>TSI_10_20</th>\n",
              "      <th>Acc/Dist_ROC_10</th>\n",
              "      <th>Chaikin</th>\n",
              "      <th>MFI_10</th>\n",
              "      <th>OBV_10</th>\n",
              "      <th>Force_10</th>\n",
              "      <th>EoM_10</th>\n",
              "      <th>CCI_10</th>\n",
              "      <th>Copp_10</th>\n",
              "      <th>KelChM_10</th>\n",
              "      <th>KelChU_10</th>\n",
              "      <th>KelChD_10</th>\n",
              "      <th>Ultimate_Osc</th>\n",
              "      <th>STD_10</th>\n",
              "      <th>Close</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>21.5900</td>\n",
              "      <td>21.6499</td>\n",
              "      <td>21.4000</td>\n",
              "      <td>64522.640</td>\n",
              "      <td>1.390138e+06</td>\n",
              "      <td>64522.640</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.555567</td>\n",
              "      <td>21.711133</td>\n",
              "      <td>21.461233</td>\n",
              "      <td>21.805467</td>\n",
              "      <td>21.305667</td>\n",
              "      <td>21.961033</td>\n",
              "      <td>21.211333</td>\n",
              "      <td>0.867547</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "      <td>21.6168</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21.6204</td>\n",
              "      <td>21.7216</td>\n",
              "      <td>21.4310</td>\n",
              "      <td>90510.250</td>\n",
              "      <td>1.955451e+06</td>\n",
              "      <td>90510.250</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.571000</td>\n",
              "      <td>21.711000</td>\n",
              "      <td>21.420400</td>\n",
              "      <td>21.861600</td>\n",
              "      <td>21.280400</td>\n",
              "      <td>22.001600</td>\n",
              "      <td>21.129800</td>\n",
              "      <td>0.445286</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "      <td>21.5604</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>21.5648</td>\n",
              "      <td>22.0000</td>\n",
              "      <td>21.5445</td>\n",
              "      <td>211148.450</td>\n",
              "      <td>4.604213e+06</td>\n",
              "      <td>211148.450</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.830833</td>\n",
              "      <td>22.117167</td>\n",
              "      <td>21.661667</td>\n",
              "      <td>22.286333</td>\n",
              "      <td>21.375333</td>\n",
              "      <td>22.572667</td>\n",
              "      <td>21.206167</td>\n",
              "      <td>0.885840</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "      <td>21.9480</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>21.9500</td>\n",
              "      <td>21.9873</td>\n",
              "      <td>21.7000</td>\n",
              "      <td>176879.800</td>\n",
              "      <td>3.870645e+06</td>\n",
              "      <td>176879.800</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.845533</td>\n",
              "      <td>21.991067</td>\n",
              "      <td>21.703767</td>\n",
              "      <td>22.132833</td>\n",
              "      <td>21.558233</td>\n",
              "      <td>22.278367</td>\n",
              "      <td>21.416467</td>\n",
              "      <td>0.519666</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "      <td>21.8493</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>21.8486</td>\n",
              "      <td>22.1832</td>\n",
              "      <td>21.6851</td>\n",
              "      <td>236465.980</td>\n",
              "      <td>5.189767e+06</td>\n",
              "      <td>236465.980</td>\n",
              "      <td>26.649889</td>\n",
              "      <td>26.649710</td>\n",
              "      <td>0.027216</td>\n",
              "      <td>0.001351</td>\n",
              "      <td>0.363514</td>\n",
              "      <td>0.039557</td>\n",
              "      <td>0.513771</td>\n",
              "      <td>21.988233</td>\n",
              "      <td>22.291367</td>\n",
              "      <td>21.793267</td>\n",
              "      <td>22.486333</td>\n",
              "      <td>21.490133</td>\n",
              "      <td>22.789467</td>\n",
              "      <td>21.295167</td>\n",
              "      <td>0.825738</td>\n",
              "      <td>0.528327</td>\n",
              "      <td>0.000124</td>\n",
              "      <td>0.397268</td>\n",
              "      <td>0.057879</td>\n",
              "      <td>0.058158</td>\n",
              "      <td>-0.001172</td>\n",
              "      <td>24.939114</td>\n",
              "      <td>0.030444</td>\n",
              "      <td>0.114572</td>\n",
              "      <td>0.488466</td>\n",
              "      <td>0.022957</td>\n",
              "      <td>-2.095972e+10</td>\n",
              "      <td>-62.468319</td>\n",
              "      <td>0.514071</td>\n",
              "      <td>3690.404218</td>\n",
              "      <td>9762.972708</td>\n",
              "      <td>-1.384959e-08</td>\n",
              "      <td>0.059553</td>\n",
              "      <td>0.003780</td>\n",
              "      <td>26.641232</td>\n",
              "      <td>27.004807</td>\n",
              "      <td>26.277656</td>\n",
              "      <td>3.741405</td>\n",
              "      <td>0.260022</td>\n",
              "      <td>22.0964</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2996</th>\n",
              "      <td>29.6684</td>\n",
              "      <td>29.6777</td>\n",
              "      <td>29.5000</td>\n",
              "      <td>25224.484</td>\n",
              "      <td>7.455520e+05</td>\n",
              "      <td>25224.484</td>\n",
              "      <td>29.549030</td>\n",
              "      <td>29.665608</td>\n",
              "      <td>-0.077000</td>\n",
              "      <td>0.010013</td>\n",
              "      <td>0.247825</td>\n",
              "      <td>0.018477</td>\n",
              "      <td>0.568444</td>\n",
              "      <td>29.588033</td>\n",
              "      <td>29.676067</td>\n",
              "      <td>29.498367</td>\n",
              "      <td>29.765733</td>\n",
              "      <td>29.410333</td>\n",
              "      <td>29.853767</td>\n",
              "      <td>29.320667</td>\n",
              "      <td>0.486213</td>\n",
              "      <td>0.525558</td>\n",
              "      <td>-0.001565</td>\n",
              "      <td>0.455695</td>\n",
              "      <td>-0.443699</td>\n",
              "      <td>-0.389233</td>\n",
              "      <td>-0.054466</td>\n",
              "      <td>25.684742</td>\n",
              "      <td>-0.226532</td>\n",
              "      <td>-0.899139</td>\n",
              "      <td>0.284627</td>\n",
              "      <td>-0.224848</td>\n",
              "      <td>-9.927756e-01</td>\n",
              "      <td>5226.196145</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>6386.476300</td>\n",
              "      <td>16808.813098</td>\n",
              "      <td>-1.188300e-07</td>\n",
              "      <td>0.469893</td>\n",
              "      <td>-0.043122</td>\n",
              "      <td>29.550197</td>\n",
              "      <td>29.841237</td>\n",
              "      <td>29.259157</td>\n",
              "      <td>3.512809</td>\n",
              "      <td>0.136498</td>\n",
              "      <td>29.5864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2997</th>\n",
              "      <td>29.5896</td>\n",
              "      <td>29.5990</td>\n",
              "      <td>29.1614</td>\n",
              "      <td>79507.131</td>\n",
              "      <td>2.336592e+06</td>\n",
              "      <td>79507.131</td>\n",
              "      <td>29.549770</td>\n",
              "      <td>29.599224</td>\n",
              "      <td>0.007400</td>\n",
              "      <td>-0.014118</td>\n",
              "      <td>0.282330</td>\n",
              "      <td>0.018270</td>\n",
              "      <td>0.038278</td>\n",
              "      <td>29.353633</td>\n",
              "      <td>29.545867</td>\n",
              "      <td>29.108267</td>\n",
              "      <td>29.791233</td>\n",
              "      <td>28.916033</td>\n",
              "      <td>29.983467</td>\n",
              "      <td>28.670667</td>\n",
              "      <td>0.317870</td>\n",
              "      <td>0.487797</td>\n",
              "      <td>-0.001541</td>\n",
              "      <td>0.483009</td>\n",
              "      <td>-0.478365</td>\n",
              "      <td>-0.407059</td>\n",
              "      <td>-0.071305</td>\n",
              "      <td>25.755838</td>\n",
              "      <td>-0.117158</td>\n",
              "      <td>-0.969808</td>\n",
              "      <td>0.161843</td>\n",
              "      <td>-0.243082</td>\n",
              "      <td>-1.342082e+00</td>\n",
              "      <td>-6208.430521</td>\n",
              "      <td>0.500000</td>\n",
              "      <td>9730.102700</td>\n",
              "      <td>-247.428354</td>\n",
              "      <td>-3.897602e-08</td>\n",
              "      <td>-1.885690</td>\n",
              "      <td>-0.041900</td>\n",
              "      <td>29.539650</td>\n",
              "      <td>29.816030</td>\n",
              "      <td>29.263270</td>\n",
              "      <td>3.211586</td>\n",
              "      <td>0.134967</td>\n",
              "      <td>29.3005</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2998</th>\n",
              "      <td>29.3038</td>\n",
              "      <td>29.4165</td>\n",
              "      <td>28.7051</td>\n",
              "      <td>94503.314</td>\n",
              "      <td>2.748226e+06</td>\n",
              "      <td>94503.314</td>\n",
              "      <td>29.468480</td>\n",
              "      <td>29.473402</td>\n",
              "      <td>-0.812900</td>\n",
              "      <td>-0.022487</td>\n",
              "      <td>0.360343</td>\n",
              "      <td>0.031404</td>\n",
              "      <td>-0.106499</td>\n",
              "      <td>29.009600</td>\n",
              "      <td>29.314100</td>\n",
              "      <td>28.602700</td>\n",
              "      <td>29.721000</td>\n",
              "      <td>28.298200</td>\n",
              "      <td>30.025500</td>\n",
              "      <td>27.891300</td>\n",
              "      <td>0.284088</td>\n",
              "      <td>0.450759</td>\n",
              "      <td>-0.001613</td>\n",
              "      <td>0.508143</td>\n",
              "      <td>-0.558290</td>\n",
              "      <td>-0.437306</td>\n",
              "      <td>-0.120984</td>\n",
              "      <td>26.077564</td>\n",
              "      <td>-0.315304</td>\n",
              "      <td>-1.150611</td>\n",
              "      <td>0.094616</td>\n",
              "      <td>-0.287353</td>\n",
              "      <td>8.715991e-01</td>\n",
              "      <td>-14091.526039</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>-11947.764400</td>\n",
              "      <td>22575.893755</td>\n",
              "      <td>-2.665565e-07</td>\n",
              "      <td>-2.454804</td>\n",
              "      <td>-0.047806</td>\n",
              "      <td>29.482240</td>\n",
              "      <td>29.770660</td>\n",
              "      <td>29.193820</td>\n",
              "      <td>3.082025</td>\n",
              "      <td>0.231361</td>\n",
              "      <td>28.9072</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2999</th>\n",
              "      <td>28.9073</td>\n",
              "      <td>29.4170</td>\n",
              "      <td>28.8655</td>\n",
              "      <td>157791.114</td>\n",
              "      <td>4.611742e+06</td>\n",
              "      <td>157791.114</td>\n",
              "      <td>29.413570</td>\n",
              "      <td>29.391529</td>\n",
              "      <td>-0.549100</td>\n",
              "      <td>-0.019672</td>\n",
              "      <td>0.395098</td>\n",
              "      <td>0.036242</td>\n",
              "      <td>0.133706</td>\n",
              "      <td>29.101867</td>\n",
              "      <td>29.338233</td>\n",
              "      <td>28.786733</td>\n",
              "      <td>29.653367</td>\n",
              "      <td>28.550367</td>\n",
              "      <td>29.889733</td>\n",
              "      <td>28.235233</td>\n",
              "      <td>0.285766</td>\n",
              "      <td>0.420760</td>\n",
              "      <td>-0.001700</td>\n",
              "      <td>0.531345</td>\n",
              "      <td>-0.600610</td>\n",
              "      <td>-0.469966</td>\n",
              "      <td>-0.130644</td>\n",
              "      <td>26.423596</td>\n",
              "      <td>-0.296414</td>\n",
              "      <td>-1.271441</td>\n",
              "      <td>0.095119</td>\n",
              "      <td>-0.303720</td>\n",
              "      <td>-5.987799e+00</td>\n",
              "      <td>-24562.513910</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>8786.863100</td>\n",
              "      <td>-59432.361792</td>\n",
              "      <td>-2.827992e-07</td>\n",
              "      <td>-1.496051</td>\n",
              "      <td>-0.046415</td>\n",
              "      <td>29.432090</td>\n",
              "      <td>29.754410</td>\n",
              "      <td>29.109770</td>\n",
              "      <td>2.765954</td>\n",
              "      <td>0.266501</td>\n",
              "      <td>29.0231</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3000</th>\n",
              "      <td>29.0315</td>\n",
              "      <td>29.0495</td>\n",
              "      <td>28.8955</td>\n",
              "      <td>5967.187</td>\n",
              "      <td>1.728995e+05</td>\n",
              "      <td>5967.187</td>\n",
              "      <td>29.344070</td>\n",
              "      <td>29.304069</td>\n",
              "      <td>-0.695000</td>\n",
              "      <td>-0.016442</td>\n",
              "      <td>0.351262</td>\n",
              "      <td>0.040822</td>\n",
              "      <td>0.138053</td>\n",
              "      <td>28.951833</td>\n",
              "      <td>29.008167</td>\n",
              "      <td>28.854167</td>\n",
              "      <td>29.105833</td>\n",
              "      <td>28.797833</td>\n",
              "      <td>29.162167</td>\n",
              "      <td>28.700167</td>\n",
              "      <td>0.097403</td>\n",
              "      <td>0.361968</td>\n",
              "      <td>-0.001799</td>\n",
              "      <td>0.531345</td>\n",
              "      <td>-0.645653</td>\n",
              "      <td>-0.505104</td>\n",
              "      <td>-0.140549</td>\n",
              "      <td>26.557589</td>\n",
              "      <td>-0.385534</td>\n",
              "      <td>-1.297586</td>\n",
              "      <td>0.095119</td>\n",
              "      <td>-0.323754</td>\n",
              "      <td>-9.050139e-01</td>\n",
              "      <td>-6630.159451</td>\n",
              "      <td>0.400000</td>\n",
              "      <td>2743.445700</td>\n",
              "      <td>33707.361000</td>\n",
              "      <td>-6.959226e-07</td>\n",
              "      <td>-1.606970</td>\n",
              "      <td>-0.044619</td>\n",
              "      <td>29.368910</td>\n",
              "      <td>29.680270</td>\n",
              "      <td>29.057550</td>\n",
              "      <td>2.708718</td>\n",
              "      <td>0.299471</td>\n",
              "      <td>28.9105</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3001 rows × 46 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         Open     High      Low  ...  Ultimate_Osc    STD_10    Close\n",
              "0     21.5900  21.6499  21.4000  ...      3.741405  0.260022  21.6168\n",
              "1     21.6204  21.7216  21.4310  ...      3.741405  0.260022  21.5604\n",
              "2     21.5648  22.0000  21.5445  ...      3.741405  0.260022  21.9480\n",
              "3     21.9500  21.9873  21.7000  ...      3.741405  0.260022  21.8493\n",
              "4     21.8486  22.1832  21.6851  ...      3.741405  0.260022  22.0964\n",
              "...       ...      ...      ...  ...           ...       ...      ...\n",
              "2996  29.6684  29.6777  29.5000  ...      3.512809  0.136498  29.5864\n",
              "2997  29.5896  29.5990  29.1614  ...      3.211586  0.134967  29.3005\n",
              "2998  29.3038  29.4165  28.7051  ...      3.082025  0.231361  28.9072\n",
              "2999  28.9073  29.4170  28.8655  ...      2.765954  0.266501  29.0231\n",
              "3000  29.0315  29.0495  28.8955  ...      2.708718  0.299471  28.9105\n",
              "\n",
              "[3001 rows x 46 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RsxqJ6P5oeQL"
      },
      "source": [
        "values = X.values"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XwUpmpWdokOo",
        "outputId": "ed04043e-b017-48ec-89e0-65a44680e682"
      },
      "source": [
        "\r\n",
        "values = values.astype('float32')\r\n",
        "# normalize features\r\n",
        "scaler = MinMaxScaler(feature_range=(0, 1))\r\n",
        "scaled = scaler.fit_transform(values)\r\n",
        "# specify the number of lag hours\r\n",
        "n_hours = 21\r\n",
        "n_features = 46\r\n",
        "# frame as supervised learning\r\n",
        "reframed = series_to_supervised(scaled, n_hours, 1)\r\n",
        "print(reframed.shape)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2980, 1012)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1lzFwJk-oydt",
        "outputId": "e6e3eb03-a08b-4e8c-c4b8-e002dd71f689"
      },
      "source": [
        "reframed.shape[0]"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2980"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9dVInrIRo2_i",
        "outputId": "634fae15-d70c-4bd5-e317-1762e5fbb09b"
      },
      "source": [
        "# split into train and test sets\r\n",
        "values = reframed.values\r\n",
        "n_train_hours = reframed.shape[0]\r\n",
        "train = values[:int(0.9*n_train_hours), :]\r\n",
        "test = values[int(0.9*n_train_hours):, :]\r\n",
        "# split into input and outputs\r\n",
        "n_obs = n_hours * n_features\r\n",
        "train_X, train_y = train[:, :n_obs], train[:, -n_features]\r\n",
        "test_X, test_y = test[:, :n_obs], test[:, -n_features]\r\n",
        "print(train_X.shape, len(train_X), train_y.shape)"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2682, 966) 2682 (2682,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oCNNQZgso3TK",
        "outputId": "f26a17cf-9a46-4af2-c277-69b413f903e4"
      },
      "source": [
        "# reshape input to be 3D [samples, timesteps, features]\r\n",
        "train_X_lstm = train_X.reshape((train_X.shape[0], n_hours, n_features))\r\n",
        "test_X_lstm = test_X.reshape((test_X.shape[0], n_hours, n_features))\r\n",
        "print(train_X_lstm.shape, train_y.shape, test_X_lstm.shape, test_y.shape)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2682, 21, 46) (2682,) (298, 21, 46) (298,)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J0ZZui2io6E-",
        "outputId": "aa6ae60e-05f8-4817-920d-ba9792399484"
      },
      "source": [
        "from keras.models import Sequential\r\n",
        "from keras.layers import Dense\r\n",
        "from keras.layers import Bidirectional,LSTM\r\n",
        "from numpy import concatenate\r\n",
        "from keras.layers import MaxPooling1D\r\n",
        "from keras.layers import Flatten\r\n",
        "from keras.layers import Conv1D\r\n",
        "\r\n",
        "\r\n",
        "# design network\r\n",
        "model = Sequential()\r\n",
        "model.add(LSTM(32, input_shape=(train_X_lstm.shape[1], train_X_lstm.shape[2]),recurrent_activation='tanh',return_sequences=True))\r\n",
        "model.add(Conv1D(128,2,activation='relu'))\r\n",
        "model.add(MaxPooling1D())\r\n",
        "model.add(Flatten())\r\n",
        "model.add(Dense(128,activation='relu'))\r\n",
        "model.add(Dense(1))\r\n",
        "model.compile(loss='mae', optimizer='adam')\r\n",
        "# fit network\r\n",
        "history = model.fit(train_X_lstm, train_y, epochs=500, verbose=2, shuffle=True,batch_size=70,validation_data=(test_X_lstm,test_y))\r\n",
        "model.summary()"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/500\n",
            "39/39 - 1s - loss: 0.0649 - val_loss: 0.0337\n",
            "Epoch 2/500\n",
            "39/39 - 1s - loss: 0.0191 - val_loss: 0.0281\n",
            "Epoch 3/500\n",
            "39/39 - 1s - loss: 0.0146 - val_loss: 0.0226\n",
            "Epoch 4/500\n",
            "39/39 - 1s - loss: 0.0253 - val_loss: 0.0247\n",
            "Epoch 5/500\n",
            "39/39 - 1s - loss: 0.0114 - val_loss: 0.0289\n",
            "Epoch 6/500\n",
            "39/39 - 1s - loss: 0.0157 - val_loss: 0.0160\n",
            "Epoch 7/500\n",
            "39/39 - 1s - loss: 0.0105 - val_loss: 0.0137\n",
            "Epoch 8/500\n",
            "39/39 - 1s - loss: 0.0097 - val_loss: 0.0219\n",
            "Epoch 9/500\n",
            "39/39 - 1s - loss: 0.0113 - val_loss: 0.0147\n",
            "Epoch 10/500\n",
            "39/39 - 1s - loss: 0.0114 - val_loss: 0.0184\n",
            "Epoch 11/500\n",
            "39/39 - 1s - loss: 0.0094 - val_loss: 0.0112\n",
            "Epoch 12/500\n",
            "39/39 - 1s - loss: 0.0096 - val_loss: 0.0130\n",
            "Epoch 13/500\n",
            "39/39 - 1s - loss: 0.0104 - val_loss: 0.0147\n",
            "Epoch 14/500\n",
            "39/39 - 1s - loss: 0.0083 - val_loss: 0.0111\n",
            "Epoch 15/500\n",
            "39/39 - 1s - loss: 0.0096 - val_loss: 0.0258\n",
            "Epoch 16/500\n",
            "39/39 - 1s - loss: 0.0169 - val_loss: 0.0129\n",
            "Epoch 17/500\n",
            "39/39 - 1s - loss: 0.0088 - val_loss: 0.0114\n",
            "Epoch 18/500\n",
            "39/39 - 1s - loss: 0.0066 - val_loss: 0.0210\n",
            "Epoch 19/500\n",
            "39/39 - 1s - loss: 0.0100 - val_loss: 0.0320\n",
            "Epoch 20/500\n",
            "39/39 - 1s - loss: 0.0091 - val_loss: 0.0099\n",
            "Epoch 21/500\n",
            "39/39 - 1s - loss: 0.0065 - val_loss: 0.0131\n",
            "Epoch 22/500\n",
            "39/39 - 1s - loss: 0.0075 - val_loss: 0.0142\n",
            "Epoch 23/500\n",
            "39/39 - 1s - loss: 0.0074 - val_loss: 0.0165\n",
            "Epoch 24/500\n",
            "39/39 - 1s - loss: 0.0071 - val_loss: 0.0137\n",
            "Epoch 25/500\n",
            "39/39 - 1s - loss: 0.0106 - val_loss: 0.0123\n",
            "Epoch 26/500\n",
            "39/39 - 1s - loss: 0.0087 - val_loss: 0.0093\n",
            "Epoch 27/500\n",
            "39/39 - 1s - loss: 0.0078 - val_loss: 0.0101\n",
            "Epoch 28/500\n",
            "39/39 - 1s - loss: 0.0075 - val_loss: 0.0198\n",
            "Epoch 29/500\n",
            "39/39 - 1s - loss: 0.0062 - val_loss: 0.0092\n",
            "Epoch 30/500\n",
            "39/39 - 1s - loss: 0.0066 - val_loss: 0.0119\n",
            "Epoch 31/500\n",
            "39/39 - 1s - loss: 0.0079 - val_loss: 0.0101\n",
            "Epoch 32/500\n",
            "39/39 - 1s - loss: 0.0052 - val_loss: 0.0094\n",
            "Epoch 33/500\n",
            "39/39 - 1s - loss: 0.0080 - val_loss: 0.0104\n",
            "Epoch 34/500\n",
            "39/39 - 1s - loss: 0.0108 - val_loss: 0.0103\n",
            "Epoch 35/500\n",
            "39/39 - 1s - loss: 0.0097 - val_loss: 0.0092\n",
            "Epoch 36/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0189\n",
            "Epoch 37/500\n",
            "39/39 - 1s - loss: 0.0070 - val_loss: 0.0134\n",
            "Epoch 38/500\n",
            "39/39 - 1s - loss: 0.0077 - val_loss: 0.0166\n",
            "Epoch 39/500\n",
            "39/39 - 1s - loss: 0.0075 - val_loss: 0.0176\n",
            "Epoch 40/500\n",
            "39/39 - 1s - loss: 0.0068 - val_loss: 0.0087\n",
            "Epoch 41/500\n",
            "39/39 - 1s - loss: 0.0068 - val_loss: 0.0090\n",
            "Epoch 42/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0148\n",
            "Epoch 43/500\n",
            "39/39 - 1s - loss: 0.0071 - val_loss: 0.0131\n",
            "Epoch 44/500\n",
            "39/39 - 1s - loss: 0.0099 - val_loss: 0.0353\n",
            "Epoch 45/500\n",
            "39/39 - 1s - loss: 0.0081 - val_loss: 0.0154\n",
            "Epoch 46/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0102\n",
            "Epoch 47/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0106\n",
            "Epoch 48/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0100\n",
            "Epoch 49/500\n",
            "39/39 - 1s - loss: 0.0058 - val_loss: 0.0089\n",
            "Epoch 50/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0077\n",
            "Epoch 51/500\n",
            "39/39 - 1s - loss: 0.0060 - val_loss: 0.0088\n",
            "Epoch 52/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0094\n",
            "Epoch 53/500\n",
            "39/39 - 1s - loss: 0.0061 - val_loss: 0.0184\n",
            "Epoch 54/500\n",
            "39/39 - 1s - loss: 0.0082 - val_loss: 0.0091\n",
            "Epoch 55/500\n",
            "39/39 - 1s - loss: 0.0073 - val_loss: 0.0104\n",
            "Epoch 56/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0087\n",
            "Epoch 57/500\n",
            "39/39 - 1s - loss: 0.0100 - val_loss: 0.0106\n",
            "Epoch 58/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0077\n",
            "Epoch 59/500\n",
            "39/39 - 1s - loss: 0.0063 - val_loss: 0.0142\n",
            "Epoch 60/500\n",
            "39/39 - 1s - loss: 0.0063 - val_loss: 0.0090\n",
            "Epoch 61/500\n",
            "39/39 - 1s - loss: 0.0055 - val_loss: 0.0106\n",
            "Epoch 62/500\n",
            "39/39 - 1s - loss: 0.0065 - val_loss: 0.0075\n",
            "Epoch 63/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0148\n",
            "Epoch 64/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0167\n",
            "Epoch 65/500\n",
            "39/39 - 1s - loss: 0.0055 - val_loss: 0.0083\n",
            "Epoch 66/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0085\n",
            "Epoch 67/500\n",
            "39/39 - 1s - loss: 0.0097 - val_loss: 0.0172\n",
            "Epoch 68/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0091\n",
            "Epoch 69/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0091\n",
            "Epoch 70/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0089\n",
            "Epoch 71/500\n",
            "39/39 - 1s - loss: 0.0088 - val_loss: 0.0135\n",
            "Epoch 72/500\n",
            "39/39 - 1s - loss: 0.0080 - val_loss: 0.0081\n",
            "Epoch 73/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0103\n",
            "Epoch 74/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0097\n",
            "Epoch 75/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0131\n",
            "Epoch 76/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0074\n",
            "Epoch 77/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0132\n",
            "Epoch 78/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0076\n",
            "Epoch 79/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0171\n",
            "Epoch 80/500\n",
            "39/39 - 1s - loss: 0.0058 - val_loss: 0.0129\n",
            "Epoch 81/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0071\n",
            "Epoch 82/500\n",
            "39/39 - 1s - loss: 0.0060 - val_loss: 0.0080\n",
            "Epoch 83/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0081\n",
            "Epoch 84/500\n",
            "39/39 - 1s - loss: 0.0052 - val_loss: 0.0113\n",
            "Epoch 85/500\n",
            "39/39 - 1s - loss: 0.0055 - val_loss: 0.0147\n",
            "Epoch 86/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0072\n",
            "Epoch 87/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0132\n",
            "Epoch 88/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0123\n",
            "Epoch 89/500\n",
            "39/39 - 1s - loss: 0.0069 - val_loss: 0.0076\n",
            "Epoch 90/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0068\n",
            "Epoch 91/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0130\n",
            "Epoch 92/500\n",
            "39/39 - 1s - loss: 0.0068 - val_loss: 0.0085\n",
            "Epoch 93/500\n",
            "39/39 - 1s - loss: 0.0070 - val_loss: 0.0106\n",
            "Epoch 94/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0068\n",
            "Epoch 95/500\n",
            "39/39 - 1s - loss: 0.0065 - val_loss: 0.0067\n",
            "Epoch 96/500\n",
            "39/39 - 1s - loss: 0.0063 - val_loss: 0.0105\n",
            "Epoch 97/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0177\n",
            "Epoch 98/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0073\n",
            "Epoch 99/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0087\n",
            "Epoch 100/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0076\n",
            "Epoch 101/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0084\n",
            "Epoch 102/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0123\n",
            "Epoch 103/500\n",
            "39/39 - 1s - loss: 0.0064 - val_loss: 0.0079\n",
            "Epoch 104/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0092\n",
            "Epoch 105/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0175\n",
            "Epoch 106/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0102\n",
            "Epoch 107/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0075\n",
            "Epoch 108/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0118\n",
            "Epoch 109/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0152\n",
            "Epoch 110/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0076\n",
            "Epoch 111/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0077\n",
            "Epoch 112/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0085\n",
            "Epoch 113/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0077\n",
            "Epoch 114/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0140\n",
            "Epoch 115/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0057\n",
            "Epoch 116/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0076\n",
            "Epoch 117/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0066\n",
            "Epoch 118/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0086\n",
            "Epoch 119/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0077\n",
            "Epoch 120/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0065\n",
            "Epoch 121/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0120\n",
            "Epoch 122/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0092\n",
            "Epoch 123/500\n",
            "39/39 - 1s - loss: 0.0045 - val_loss: 0.0082\n",
            "Epoch 124/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0084\n",
            "Epoch 125/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0099\n",
            "Epoch 126/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0087\n",
            "Epoch 127/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0098\n",
            "Epoch 128/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0062\n",
            "Epoch 129/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0078\n",
            "Epoch 130/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0071\n",
            "Epoch 131/500\n",
            "39/39 - 1s - loss: 0.0070 - val_loss: 0.0070\n",
            "Epoch 132/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0064\n",
            "Epoch 133/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0085\n",
            "Epoch 134/500\n",
            "39/39 - 1s - loss: 0.0045 - val_loss: 0.0077\n",
            "Epoch 135/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0074\n",
            "Epoch 136/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0063\n",
            "Epoch 137/500\n",
            "39/39 - 1s - loss: 0.0069 - val_loss: 0.0089\n",
            "Epoch 138/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0089\n",
            "Epoch 139/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0219\n",
            "Epoch 140/500\n",
            "39/39 - 1s - loss: 0.0098 - val_loss: 0.0080\n",
            "Epoch 141/500\n",
            "39/39 - 1s - loss: 0.0087 - val_loss: 0.0092\n",
            "Epoch 142/500\n",
            "39/39 - 1s - loss: 0.0055 - val_loss: 0.0059\n",
            "Epoch 143/500\n",
            "39/39 - 1s - loss: 0.0070 - val_loss: 0.0068\n",
            "Epoch 144/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0081\n",
            "Epoch 145/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0073\n",
            "Epoch 146/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0186\n",
            "Epoch 147/500\n",
            "39/39 - 1s - loss: 0.0073 - val_loss: 0.0084\n",
            "Epoch 148/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0063\n",
            "Epoch 149/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0126\n",
            "Epoch 150/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0062\n",
            "Epoch 151/500\n",
            "39/39 - 1s - loss: 0.0050 - val_loss: 0.0069\n",
            "Epoch 152/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0100\n",
            "Epoch 153/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0095\n",
            "Epoch 154/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0067\n",
            "Epoch 155/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0112\n",
            "Epoch 156/500\n",
            "39/39 - 1s - loss: 0.0052 - val_loss: 0.0141\n",
            "Epoch 157/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0169\n",
            "Epoch 158/500\n",
            "39/39 - 1s - loss: 0.0063 - val_loss: 0.0128\n",
            "Epoch 159/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0059\n",
            "Epoch 160/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0071\n",
            "Epoch 161/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0170\n",
            "Epoch 162/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0097\n",
            "Epoch 163/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0101\n",
            "Epoch 164/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0109\n",
            "Epoch 165/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0064\n",
            "Epoch 166/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0064\n",
            "Epoch 167/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0059\n",
            "Epoch 168/500\n",
            "39/39 - 1s - loss: 0.0060 - val_loss: 0.0135\n",
            "Epoch 169/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0092\n",
            "Epoch 170/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0115\n",
            "Epoch 171/500\n",
            "39/39 - 1s - loss: 0.0050 - val_loss: 0.0088\n",
            "Epoch 172/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0094\n",
            "Epoch 173/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0118\n",
            "Epoch 174/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0108\n",
            "Epoch 175/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0167\n",
            "Epoch 176/500\n",
            "39/39 - 1s - loss: 0.0053 - val_loss: 0.0109\n",
            "Epoch 177/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0057\n",
            "Epoch 178/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0154\n",
            "Epoch 179/500\n",
            "39/39 - 1s - loss: 0.0055 - val_loss: 0.0070\n",
            "Epoch 180/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0088\n",
            "Epoch 181/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0057\n",
            "Epoch 182/500\n",
            "39/39 - 1s - loss: 0.0051 - val_loss: 0.0089\n",
            "Epoch 183/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0099\n",
            "Epoch 184/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0091\n",
            "Epoch 185/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0109\n",
            "Epoch 186/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0079\n",
            "Epoch 187/500\n",
            "39/39 - 1s - loss: 0.0075 - val_loss: 0.0128\n",
            "Epoch 188/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0068\n",
            "Epoch 189/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0077\n",
            "Epoch 190/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0077\n",
            "Epoch 191/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0057\n",
            "Epoch 192/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0118\n",
            "Epoch 193/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0052\n",
            "Epoch 194/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0059\n",
            "Epoch 195/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0064\n",
            "Epoch 196/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0059\n",
            "Epoch 197/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0160\n",
            "Epoch 198/500\n",
            "39/39 - 1s - loss: 0.0069 - val_loss: 0.0081\n",
            "Epoch 199/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0088\n",
            "Epoch 200/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0077\n",
            "Epoch 201/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0056\n",
            "Epoch 202/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0078\n",
            "Epoch 203/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0082\n",
            "Epoch 204/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0069\n",
            "Epoch 205/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0128\n",
            "Epoch 206/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0089\n",
            "Epoch 207/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0126\n",
            "Epoch 208/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0064\n",
            "Epoch 209/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0053\n",
            "Epoch 210/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0093\n",
            "Epoch 211/500\n",
            "39/39 - 1s - loss: 0.0048 - val_loss: 0.0163\n",
            "Epoch 212/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0143\n",
            "Epoch 213/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0206\n",
            "Epoch 214/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0050\n",
            "Epoch 215/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0107\n",
            "Epoch 216/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0088\n",
            "Epoch 217/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0157\n",
            "Epoch 218/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0067\n",
            "Epoch 219/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0060\n",
            "Epoch 220/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0062\n",
            "Epoch 221/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0173\n",
            "Epoch 222/500\n",
            "39/39 - 1s - loss: 0.0045 - val_loss: 0.0074\n",
            "Epoch 223/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0097\n",
            "Epoch 224/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0063\n",
            "Epoch 225/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0055\n",
            "Epoch 226/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0162\n",
            "Epoch 227/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0056\n",
            "Epoch 228/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0102\n",
            "Epoch 229/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0105\n",
            "Epoch 230/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0080\n",
            "Epoch 231/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0134\n",
            "Epoch 232/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0085\n",
            "Epoch 233/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0130\n",
            "Epoch 234/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0052\n",
            "Epoch 235/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0055\n",
            "Epoch 236/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0051\n",
            "Epoch 237/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0074\n",
            "Epoch 238/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0080\n",
            "Epoch 239/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0084\n",
            "Epoch 240/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0142\n",
            "Epoch 241/500\n",
            "39/39 - 1s - loss: 0.0058 - val_loss: 0.0146\n",
            "Epoch 242/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0073\n",
            "Epoch 243/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0097\n",
            "Epoch 244/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0205\n",
            "Epoch 245/500\n",
            "39/39 - 1s - loss: 0.0082 - val_loss: 0.0107\n",
            "Epoch 246/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0059\n",
            "Epoch 247/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0074\n",
            "Epoch 248/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0151\n",
            "Epoch 249/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0062\n",
            "Epoch 250/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0083\n",
            "Epoch 251/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0082\n",
            "Epoch 252/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0122\n",
            "Epoch 253/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0056\n",
            "Epoch 254/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0069\n",
            "Epoch 255/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0073\n",
            "Epoch 256/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0102\n",
            "Epoch 257/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0050\n",
            "Epoch 258/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0055\n",
            "Epoch 259/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0243\n",
            "Epoch 260/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0091\n",
            "Epoch 261/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0058\n",
            "Epoch 262/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0111\n",
            "Epoch 263/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0051\n",
            "Epoch 264/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0101\n",
            "Epoch 265/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0138\n",
            "Epoch 266/500\n",
            "39/39 - 1s - loss: 0.0065 - val_loss: 0.0072\n",
            "Epoch 267/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0078\n",
            "Epoch 268/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0070\n",
            "Epoch 269/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0134\n",
            "Epoch 270/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0085\n",
            "Epoch 271/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0056\n",
            "Epoch 272/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0115\n",
            "Epoch 273/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0056\n",
            "Epoch 274/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0058\n",
            "Epoch 275/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0052\n",
            "Epoch 276/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0089\n",
            "Epoch 277/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0062\n",
            "Epoch 278/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0057\n",
            "Epoch 279/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0070\n",
            "Epoch 280/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0079\n",
            "Epoch 281/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0064\n",
            "Epoch 282/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0059\n",
            "Epoch 283/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0046\n",
            "Epoch 284/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0071\n",
            "Epoch 285/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0105\n",
            "Epoch 286/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0072\n",
            "Epoch 287/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0062\n",
            "Epoch 288/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0167\n",
            "Epoch 289/500\n",
            "39/39 - 1s - loss: 0.0045 - val_loss: 0.0132\n",
            "Epoch 290/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0187\n",
            "Epoch 291/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0056\n",
            "Epoch 292/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0069\n",
            "Epoch 293/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0052\n",
            "Epoch 294/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0126\n",
            "Epoch 295/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0063\n",
            "Epoch 296/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0066\n",
            "Epoch 297/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0066\n",
            "Epoch 298/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0073\n",
            "Epoch 299/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0084\n",
            "Epoch 300/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0051\n",
            "Epoch 301/500\n",
            "39/39 - 1s - loss: 0.0021 - val_loss: 0.0071\n",
            "Epoch 302/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0081\n",
            "Epoch 303/500\n",
            "39/39 - 1s - loss: 0.0021 - val_loss: 0.0058\n",
            "Epoch 304/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0118\n",
            "Epoch 305/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0082\n",
            "Epoch 306/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0170\n",
            "Epoch 307/500\n",
            "39/39 - 1s - loss: 0.0063 - val_loss: 0.0066\n",
            "Epoch 308/500\n",
            "39/39 - 1s - loss: 0.0059 - val_loss: 0.0077\n",
            "Epoch 309/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0110\n",
            "Epoch 310/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0090\n",
            "Epoch 311/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0067\n",
            "Epoch 312/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0075\n",
            "Epoch 313/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0094\n",
            "Epoch 314/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0067\n",
            "Epoch 315/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0056\n",
            "Epoch 316/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0081\n",
            "Epoch 317/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0059\n",
            "Epoch 318/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0175\n",
            "Epoch 319/500\n",
            "39/39 - 1s - loss: 0.0060 - val_loss: 0.0054\n",
            "Epoch 320/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0070\n",
            "Epoch 321/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0092\n",
            "Epoch 322/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0082\n",
            "Epoch 323/500\n",
            "39/39 - 1s - loss: 0.0043 - val_loss: 0.0122\n",
            "Epoch 324/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0053\n",
            "Epoch 325/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0114\n",
            "Epoch 326/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0067\n",
            "Epoch 327/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0071\n",
            "Epoch 328/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0092\n",
            "Epoch 329/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0102\n",
            "Epoch 330/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0069\n",
            "Epoch 331/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0056\n",
            "Epoch 332/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0092\n",
            "Epoch 333/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0055\n",
            "Epoch 334/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0149\n",
            "Epoch 335/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0100\n",
            "Epoch 336/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0065\n",
            "Epoch 337/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0077\n",
            "Epoch 338/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0105\n",
            "Epoch 339/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0052\n",
            "Epoch 340/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0105\n",
            "Epoch 341/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0061\n",
            "Epoch 342/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0066\n",
            "Epoch 343/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0060\n",
            "Epoch 344/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0203\n",
            "Epoch 345/500\n",
            "39/39 - 1s - loss: 0.0067 - val_loss: 0.0058\n",
            "Epoch 346/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0141\n",
            "Epoch 347/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0057\n",
            "Epoch 348/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0058\n",
            "Epoch 349/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0072\n",
            "Epoch 350/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0050\n",
            "Epoch 351/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0122\n",
            "Epoch 352/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0051\n",
            "Epoch 353/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0116\n",
            "Epoch 354/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0047\n",
            "Epoch 355/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0061\n",
            "Epoch 356/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0102\n",
            "Epoch 357/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0105\n",
            "Epoch 358/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0054\n",
            "Epoch 359/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0056\n",
            "Epoch 360/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0070\n",
            "Epoch 361/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0061\n",
            "Epoch 362/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0077\n",
            "Epoch 363/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0116\n",
            "Epoch 364/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0057\n",
            "Epoch 365/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0055\n",
            "Epoch 366/500\n",
            "39/39 - 1s - loss: 0.0021 - val_loss: 0.0053\n",
            "Epoch 367/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0048\n",
            "Epoch 368/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0051\n",
            "Epoch 369/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0051\n",
            "Epoch 370/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0069\n",
            "Epoch 371/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0106\n",
            "Epoch 372/500\n",
            "39/39 - 1s - loss: 0.0056 - val_loss: 0.0051\n",
            "Epoch 373/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0063\n",
            "Epoch 374/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0057\n",
            "Epoch 375/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0138\n",
            "Epoch 376/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0104\n",
            "Epoch 377/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0078\n",
            "Epoch 378/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0079\n",
            "Epoch 379/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0055\n",
            "Epoch 380/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0067\n",
            "Epoch 381/500\n",
            "39/39 - 1s - loss: 0.0020 - val_loss: 0.0054\n",
            "Epoch 382/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0049\n",
            "Epoch 383/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0068\n",
            "Epoch 384/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0081\n",
            "Epoch 385/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0052\n",
            "Epoch 386/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0044\n",
            "Epoch 387/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0059\n",
            "Epoch 388/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0070\n",
            "Epoch 389/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0055\n",
            "Epoch 390/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0102\n",
            "Epoch 391/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0051\n",
            "Epoch 392/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0043\n",
            "Epoch 393/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0139\n",
            "Epoch 394/500\n",
            "39/39 - 1s - loss: 0.0054 - val_loss: 0.0086\n",
            "Epoch 395/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0076\n",
            "Epoch 396/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0105\n",
            "Epoch 397/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0051\n",
            "Epoch 398/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0081\n",
            "Epoch 399/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0047\n",
            "Epoch 400/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0052\n",
            "Epoch 401/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0046\n",
            "Epoch 402/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0070\n",
            "Epoch 403/500\n",
            "39/39 - 1s - loss: 0.0021 - val_loss: 0.0111\n",
            "Epoch 404/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0060\n",
            "Epoch 405/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0056\n",
            "Epoch 406/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0133\n",
            "Epoch 407/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0050\n",
            "Epoch 408/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0060\n",
            "Epoch 409/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0056\n",
            "Epoch 410/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0086\n",
            "Epoch 411/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0072\n",
            "Epoch 412/500\n",
            "39/39 - 1s - loss: 0.0020 - val_loss: 0.0078\n",
            "Epoch 413/500\n",
            "39/39 - 1s - loss: 0.0040 - val_loss: 0.0057\n",
            "Epoch 414/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0057\n",
            "Epoch 415/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0043\n",
            "Epoch 416/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0125\n",
            "Epoch 417/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0063\n",
            "Epoch 418/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0077\n",
            "Epoch 419/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0051\n",
            "Epoch 420/500\n",
            "39/39 - 1s - loss: 0.0039 - val_loss: 0.0056\n",
            "Epoch 421/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0049\n",
            "Epoch 422/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0082\n",
            "Epoch 423/500\n",
            "39/39 - 1s - loss: 0.0020 - val_loss: 0.0046\n",
            "Epoch 424/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0078\n",
            "Epoch 425/500\n",
            "39/39 - 1s - loss: 0.0060 - val_loss: 0.0119\n",
            "Epoch 426/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0047\n",
            "Epoch 427/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0053\n",
            "Epoch 428/500\n",
            "39/39 - 1s - loss: 0.0027 - val_loss: 0.0089\n",
            "Epoch 429/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0074\n",
            "Epoch 430/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0055\n",
            "Epoch 431/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0043\n",
            "Epoch 432/500\n",
            "39/39 - 1s - loss: 0.0047 - val_loss: 0.0056\n",
            "Epoch 433/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0053\n",
            "Epoch 434/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0055\n",
            "Epoch 435/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0069\n",
            "Epoch 436/500\n",
            "39/39 - 1s - loss: 0.0036 - val_loss: 0.0072\n",
            "Epoch 437/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0052\n",
            "Epoch 438/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0055\n",
            "Epoch 439/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0048\n",
            "Epoch 440/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0056\n",
            "Epoch 441/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0096\n",
            "Epoch 442/500\n",
            "39/39 - 1s - loss: 0.0049 - val_loss: 0.0063\n",
            "Epoch 443/500\n",
            "39/39 - 1s - loss: 0.0035 - val_loss: 0.0047\n",
            "Epoch 444/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0084\n",
            "Epoch 445/500\n",
            "39/39 - 1s - loss: 0.0044 - val_loss: 0.0063\n",
            "Epoch 446/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0089\n",
            "Epoch 447/500\n",
            "39/39 - 1s - loss: 0.0023 - val_loss: 0.0045\n",
            "Epoch 448/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0053\n",
            "Epoch 449/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0072\n",
            "Epoch 450/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0060\n",
            "Epoch 451/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0059\n",
            "Epoch 452/500\n",
            "39/39 - 1s - loss: 0.0021 - val_loss: 0.0062\n",
            "Epoch 453/500\n",
            "39/39 - 1s - loss: 0.0038 - val_loss: 0.0060\n",
            "Epoch 454/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0104\n",
            "Epoch 455/500\n",
            "39/39 - 1s - loss: 0.0028 - val_loss: 0.0067\n",
            "Epoch 456/500\n",
            "39/39 - 1s - loss: 0.0020 - val_loss: 0.0048\n",
            "Epoch 457/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0098\n",
            "Epoch 458/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0056\n",
            "Epoch 459/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0054\n",
            "Epoch 460/500\n",
            "39/39 - 1s - loss: 0.0020 - val_loss: 0.0052\n",
            "Epoch 461/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0059\n",
            "Epoch 462/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0059\n",
            "Epoch 463/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0055\n",
            "Epoch 464/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0074\n",
            "Epoch 465/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0076\n",
            "Epoch 466/500\n",
            "39/39 - 1s - loss: 0.0046 - val_loss: 0.0086\n",
            "Epoch 467/500\n",
            "39/39 - 1s - loss: 0.0041 - val_loss: 0.0109\n",
            "Epoch 468/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0122\n",
            "Epoch 469/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0054\n",
            "Epoch 470/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0046\n",
            "Epoch 471/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0058\n",
            "Epoch 472/500\n",
            "39/39 - 1s - loss: 0.0022 - val_loss: 0.0094\n",
            "Epoch 473/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0045\n",
            "Epoch 474/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0048\n",
            "Epoch 475/500\n",
            "39/39 - 1s - loss: 0.0042 - val_loss: 0.0075\n",
            "Epoch 476/500\n",
            "39/39 - 1s - loss: 0.0030 - val_loss: 0.0105\n",
            "Epoch 477/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0073\n",
            "Epoch 478/500\n",
            "39/39 - 1s - loss: 0.0029 - val_loss: 0.0049\n",
            "Epoch 479/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0081\n",
            "Epoch 480/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0103\n",
            "Epoch 481/500\n",
            "39/39 - 1s - loss: 0.0034 - val_loss: 0.0092\n",
            "Epoch 482/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0064\n",
            "Epoch 483/500\n",
            "39/39 - 1s - loss: 0.0057 - val_loss: 0.0053\n",
            "Epoch 484/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0052\n",
            "Epoch 485/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0062\n",
            "Epoch 486/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0057\n",
            "Epoch 487/500\n",
            "39/39 - 1s - loss: 0.0025 - val_loss: 0.0068\n",
            "Epoch 488/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0054\n",
            "Epoch 489/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0088\n",
            "Epoch 490/500\n",
            "39/39 - 1s - loss: 0.0019 - val_loss: 0.0044\n",
            "Epoch 491/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0042\n",
            "Epoch 492/500\n",
            "39/39 - 1s - loss: 0.0026 - val_loss: 0.0067\n",
            "Epoch 493/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0053\n",
            "Epoch 494/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0051\n",
            "Epoch 495/500\n",
            "39/39 - 1s - loss: 0.0031 - val_loss: 0.0045\n",
            "Epoch 496/500\n",
            "39/39 - 1s - loss: 0.0037 - val_loss: 0.0065\n",
            "Epoch 497/500\n",
            "39/39 - 1s - loss: 0.0024 - val_loss: 0.0045\n",
            "Epoch 498/500\n",
            "39/39 - 1s - loss: 0.0032 - val_loss: 0.0099\n",
            "Epoch 499/500\n",
            "39/39 - 1s - loss: 0.0033 - val_loss: 0.0072\n",
            "Epoch 500/500\n",
            "39/39 - 1s - loss: 0.0018 - val_loss: 0.0057\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "lstm (LSTM)                  (None, 21, 32)            10112     \n",
            "_________________________________________________________________\n",
            "conv1d (Conv1D)              (None, 20, 128)           8320      \n",
            "_________________________________________________________________\n",
            "max_pooling1d (MaxPooling1D) (None, 10, 128)           0         \n",
            "_________________________________________________________________\n",
            "flatten (Flatten)            (None, 1280)              0         \n",
            "_________________________________________________________________\n",
            "dense (Dense)                (None, 128)               163968    \n",
            "_________________________________________________________________\n",
            "dense_1 (Dense)              (None, 1)                 129       \n",
            "=================================================================\n",
            "Total params: 182,529\n",
            "Trainable params: 182,529\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "h4WduMhqo9uu",
        "outputId": "37a75dbb-ca77-4a05-fedf-c480d0f5a879"
      },
      "source": [
        "plt.plot(range(1,501),history.history['loss'])\r\n"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f53f8bdb550>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "4_e2Hpgcplh_",
        "outputId": "15e7f441-437c-4109-dd81-51b1d1cc7fe3"
      },
      "source": [
        "plt.plot(range(1,501),history.history['val_loss'])"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f53f8723240>]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ly3_09Kpppmz"
      },
      "source": [
        "yhat_lstm = model.predict(test_X_lstm)\r\n",
        "test_X_lstm = test_X_lstm.reshape((test_X_lstm.shape[0], n_hours*n_features))"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QL1lu4Ikpvi8",
        "outputId": "aefa7b2b-663f-4c13-f035-4b11f791312a"
      },
      "source": [
        "test_X_lstm.shape"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(298, 966)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AoeJlMB6pwMu"
      },
      "source": [
        "# invert scaling for forecast\r\n",
        "inv_yhat = concatenate((yhat_lstm, test_X_lstm[:, -45:]), axis=1)\r\n",
        "inv_yhat = scaler.inverse_transform(inv_yhat)\r\n",
        "inv_yhat = inv_yhat[:,0]\r\n",
        "# invert scaling for actual"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G3WFlL9DpzFg"
      },
      "source": [
        "test_y_lstm = test_y.reshape((len(test_y), 1))\r\n",
        "inv_y = concatenate((test_y_lstm, test_X_lstm[:, -45:]), axis=1)\r\n",
        "inv_y = scaler.inverse_transform(inv_y)\r\n",
        "inv_y = inv_y[:,0]\r\n"
      ],
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "4F1yLCQvp0_6",
        "outputId": "dfc8d135-bf61-49af-9f7b-80a414c4bb18"
      },
      "source": [
        "plt.plot(inv_y,label='True')\r\n",
        "plt.plot(inv_yhat,label='Forecast')\r\n",
        "fig_size=(20,10)\r\n",
        "plt.rcParams[\"figure.figsize\"] = fig_size\r\n",
        "plt.legend(loc='best',prop={'size': 30}) \r\n",
        "plt.show()"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1440x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fQc62YKFp3J9"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}